// <auto-generated />
using System;
using Clinic.Infrastructure.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clinic.Infrastructure.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    partial class ClinicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_CI_AI")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Clinic.Data.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime");

                    b.Property<byte>("AppointmentStatus")
                        .HasColumnType("tinyint");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<int?>("MedicalRecordId")
                        .HasColumnType("int")
                        .HasColumnName("MedicalRecordID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.HasKey("AppointmentId")
                        .HasName("PK__Appointm__8ECDFCA2896563A4");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DoctorId")
                        .HasName("PK__Doctors__2DC00EDF119A2508");

                    b.HasIndex("PersonId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Identity.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshToken");
                });

            modelBuilder.Entity("Clinic.Data.Entities.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int")
                        .HasColumnName("MedicalRecordID");

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VisitDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("MedicalRecordId")
                        .HasName("PK__MedicalR__4411BBC251D4E64A");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.HasKey("PatientId")
                        .HasName("PK__Patients__970EC346A08EB619");

                    b.HasIndex("PersonId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A585488506C");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PersonId")
                        .HasName("PK__Persons__AA2FFB8587F22B37");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionID");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int")
                        .HasColumnName("MedicalRecordID");

                    b.Property<string>("MedicationNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MedicationNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("PrescriptionId")
                        .HasName("PK__Prescrip__40130812FF0A60CF");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Appointment", b =>
                {
                    b.HasOne("Clinic.Data.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointments.DoctorID");

                    b.HasOne("Clinic.Data.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("Appointments")
                        .HasForeignKey("MedicalRecordId")
                        .HasConstraintName("FK_Appointments_MedicalRecords");

                    b.HasOne("Clinic.Data.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointments.PatientID");

                    b.HasOne("Clinic.Data.Entities.Payment", "Payment")
                        .WithMany("Appointments")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_Payments.PaymentID");

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");

                    b.Navigation("Patient");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Doctor", b =>
                {
                    b.HasOne("Clinic.Data.Entities.Person", "Person")
                        .WithMany("Doctors")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Doctors_Persons");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Identity.UserRefreshToken", b =>
                {
                    b.HasOne("Clinic.Data.Entities.Identity.User", "user")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Patient", b =>
                {
                    b.HasOne("Clinic.Data.Entities.Person", "Person")
                        .WithMany("Patients")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Patients_Persons");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Prescription", b =>
                {
                    b.HasOne("Clinic.Data.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicalRecordId")
                        .IsRequired()
                        .HasConstraintName("FK_Prescriptions.MedicalRecordID");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Identity.User", b =>
                {
                    b.Navigation("UserRefreshTokens");
                });

            modelBuilder.Entity("Clinic.Data.Entities.MedicalRecord", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Payment", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Person", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
